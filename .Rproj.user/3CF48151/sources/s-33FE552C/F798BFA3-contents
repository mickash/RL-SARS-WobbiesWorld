myFunction=function(roads,car,packages) {
  initNode = c(x = car$x, y = car$y)
  dest=nextDest(packages,car)
  
  weight = 1
  if(packagesLeft(packages) < 3)weight = 2
  
  path = aStar(initNode, dest, car, roads,weight)
  nextStep = getNextStep(path,dest)
  
  car$nextMove=nextStep
  print(nextStep)
  return(car)
}

nextDest = function(packages,car) {
  if(car$load == 0) {
    distanceVector = abs((packages[,1] - car[['x']])) + abs((packages[,2] - car[['y']]))
    distanceVector[packages[,5] != 0] = Inf
    index = which.min(distanceVector)
    return(packages[index,1:2])
  }
  distanceVector = packages[car$load,3:4]
  return(distanceVector)
}

packagesLeft = function(packages){
  return(sum(packages[,5] == 0))
}

aStar = function(initNode, destNode, car, roads, weight){
  currNode = c(x = car$x, y = car$y)
  path = list()
  startElem = list(currNode,0,manhattanDistance(initNode,destNode),path)
  frontier = list(startElem)
  visited = list()
  visited[[getName(currNode)]] = manhattanDistance(currNode,destNode)
  while(length(frontier)!=0 && !vecEqual(currNode,destNode)){
    N = head(frontier,n=1)
    frontier = frontier[-1]
    currNode = N[[1]][[1]]
    path = extractNewPath(N)
    if(vecEqual(currNode,destNode)){
      return(path)
    }
    frontierAndVisited = getNeighbours(frontier,visited,initNode,destNode,currNode,roads,path,weight)
    frontier = frontierAndVisited[[1]]
    visited = frontierAndVisited[[2]]
  }
  
  if(vecEqual(currNode,destNode)){
    return(list(currNode))
  }
  stop("SOMETHING WENT WRONG")
}

getNeighbours = function(frontier,visited,initNode, dest=c(x=10,y=10), currNode, roads, path, weight){
  dim = c( x = ncol(roads$hroads),y = nrow(roads$vroads)) # dim of the gameboard
  up = getNeighbourHelp(initNode,dest,currNode,"up",dim,path,roads)
  down = getNeighbourHelp(initNode,dest,currNode,"down",dim,path,roads)
  left = getNeighbourHelp(initNode,dest,currNode,"left",dim,path,roads) 
  right = getNeighbourHelp(initNode,dest,currNode,"right",dim,path,roads)
  neighs = setNames(list(up,down,left,right), list(getName(up),getName(down),getName(left),getName(right)))
  expandedFront = Filter(Negate(is.null),neighs)
  frontierAndVisited = appendSpecial(frontier,expandedFront,visited,weight)
  frontierAndVisited[[1]] = sortFrontNodes(frontierAndVisited[[1]],weight)
  return (frontierAndVisited)
}

getNeighbourHelp = function(initNode, dest, currNode, direction, dim, path, roads){
  neigh = getNodeAtDirection(currNode,direction, dim)
  if(is.null(neigh))return(res = NULL)
  manDis = manhattanDistance(neigh, dest)
  path = newPath(currNode, path)
  cost = costFromInitialNode(initNode, neigh, path, roads)
  res = append(list(neigh, cost, manDis),path)
  return (res)
}

getName = function(node){
  return(paste(node[[1]],collapse = " "))
}

appendSpecial = function(frontier,expandedFront,visited,weight){
  i = 0
  for (elem in expandedFront) {
    i = i+1
    name = getName(elem)
    if(!(name %in% names(visited))){
      frontier[name] = list(elem)
      visited[name] = elem[[2]] + elem[[3]]
    }
    else if(elem[[2]] + elem[[3]] * weight < visited[name]){
      frontier[[name]] = elem
      visited[name] = elem[[2]] + elem[[3]]
    }
  }
  return(list(frontier,visited))
}

getNextStep = function(path,dest){
  pathLen = length(path)
  if(pathLen == 1)return(nextDirection(path[[1]],dest))
  else if(pathLen > 1){
    return(nextDirection(path[[1]],path[[2]]))
  }
  stop("SOMETHING WENT WRONG")
}

nextDirection = function(n1, n2){
  tmp = n2-n1
  if(vecEqual(tmp,c(x = 0,y = 1)))return(8) #up
  else if(vecEqual(tmp,c(x = 0,y = -1)))return(2) #down
  else if(vecEqual(tmp,c(x = 1,y = 0)))return(6) #right
  else if(vecEqual(tmp,c(x = -1,y = 0)))return(4) #left
  else if(vecEqual(tmp,c(x = 0,y = 0)))return(5) #stay
  stop("SOMETHING WENT WRONG!")
}

extractNewPath = function(arg){
  if(length(arg[[1]][[4]])==0)return(list())
  subRes = arg[[1]]
  return (subRes[4:length(subRes)])
}

sortFrontNodes = function(list,weight){
  res = list[order(sapply(list,function(x) x[[2]] + x[[3]]*weight))]
  return(res)
}

getNodeAtDirection = function(currNode,direction, dim){
  tmp = c()
  if(direction == "up") tmp = currNode + c(x = 0, y = 1)
  else if(direction == "down") tmp = currNode + c(x = 0, y = -1)
  else if(direction == "right") tmp = currNode + c( x = 1, y = 0)
  else if(direction == "left") tmp = currNode + c( x = -1, y = 0)
  return (validCoor(tmp,dim))
}

costFromInitialNode = function(initNode,neigh,path, roads){ 
  cost = 0
  xOrY = 0
  pathLen = length(path)
  tmpNode = NULL
  for (index in 1:pathLen) {
    currNode = path[[index]]
    if(index == pathLen)tmpNode = neigh 
    else{tmpNode = path[[index+1]]}
    xOrY = differenceInXOrY(tmpNode,currNode) 
    nTmp = getCost(xOrY,currNode,roads)
    cost = cost + nTmp
  }
  return (cost)
}

getCost = function(direction ,node, roads){##NEED FIXING
  dim = c(x=ncol(roads$hroads),y=nrow(roads$vroads))
  tmpNode = direction[["diffNode"]]
  roadX = node['x'] + tmpNode['x']
  roadY = node['y'] + tmpNode['y']
  
  if(direction[['d']] == 'x'){
    if(dim['x'] == roadX) roadX = roadX-1
    return(roads$hroads[roadX,roadY])
  }
  else if(direction[['d']] == 'y'){
    if(dim['y'] == roadY) roadY = roadY-1
    return (roads$vroads[roadX,roadY])
  }
  stop("SOMETHING WENT WRONG")
}

differenceInXOrY = function(n1, n2){
  tmpNode = n1 - n2
  if(tmpNode['x'] != 0 ){
    return(list(diffNode=tmpNode,d='x'))
  }
  else if(tmpNode['y'] != 0){
    return(list(diffNode=tmpNode,d='y'))
  }
  stop("SOMETHING WENT WRONG")
}

newPath = function(currNode, currPathway){
  if(length(currPathway) != 0){
    nPath = append(currPathway, list(currNode))
    return (nPath) 
  }
  return (list(currNode))
}

validCoor = function(coor, dim=10){# 10x10
  if (1 > coor['x']) {
    return (c())
  }else if(dim['x'] < coor['x']){
    return(c())
  }else if(1 > coor['y']){
    return(c())
  }else if(dim['y'] < coor['y']){
    return(c())
  }
  return (coor)
}

manhattanDistance = function(n1,n2){
  return(sum(abs(n1-n2)))
}

vecEqual = function(n1,n2){
  return(all(n1==n2))
}