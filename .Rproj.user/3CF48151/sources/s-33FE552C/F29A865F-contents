myController <- function (maze) 
{
  maxx = 6
  maxy = 6
  gamecount = 0
  moves = c(2,4,5,8,6)
  wobQ = array(0, c(maxx,maxy,maxx,maxy,length(moves),2))
  wqnames = list()
  wqnames[["wobx"]] = c(1:maxx)
  wqnames[["woby"]] = c(1:maxy)
  wqnames[["monx"]] = c(1:maxx)
  wqnames[["mony"]] = c(1:maxy)
  wqnames[["moves"]] = moves
  wqnames[["qv"]] = c("q", "visits")
  dimnames(wobQ) = wqnames
  lastpos = c(0,0,0,0)
  valmove = array(F, c(maxx,maxy,length(moves)))
  vmnames = list()
  vmnames[["posx"]] = c(1:maxx)
  vmnames[["posy"]] = c(1:maxy)
  vmnames[["moves"]] = moves
  dimnames(valmove) = vmnames
  valmove[,,'5']=T
  for (x in 1:maxx){
    for (y in 1:maxy){
      if (y>1){if (sum(maze$maze[,1] == x & maze$maze[,2] == (y-1))){valmove[x,y,'2']=T}}
      if (x>1){if (sum(maze$maze[,1] == (x-1) & maze$maze[,2] == (y))){valmove[x,y,'4']=T}}
      if (x<maxx){if (sum(maze$maze[,1] == (x+1) & maze$maze[,2] == (y))){valmove[x,y,'6']=T}}
      if (y<maxy){if (sum(maze$maze[,1] == x & maze$maze[,2] == (y+1))){valmove[x,y,'8']=T}}
    }
  }

  decideAction = function(deccont, decmaze) {
    deccont$lp = c(decmaze$wobbie,decmaze$monster1)
    mooves = names(which(deccont$vm[decmaze$wobbie[1],decmaze$wobbie[2],]))
    posQs = deccont$wq[decmaze$wobbie[1],decmaze$wobbie[2],decmaze$monster1[1],decmaze$monster1[2],mooves,'q']
    visits = sum(deccont$wq[decmaze$wobbie[1],decmaze$wobbie[2],decmaze$monster1[1],decmaze$monster1[2],mooves,'visits'])
    epsilon = if (deccont$doRand) (max(0 ,(1 - sqrt(deccont$gc / 3000)))) else 0
    if ((runif(1) < epsilon )&(visits < 900)){mymove = sample(mooves,1)}
    else{mymove = names(which.max(posQs))}
    myaction = list(move = mymove, control = deccont)
    return(myaction)
  }
  
  update = function(upcont, upmaze) {
    myreward = upmaze$reward
    learnr = 0.006
    if (upmaze$finished|!upmaze$alive){upcont$gc = upcont$gc + 1}
    if (upmaze$finished){myreward = 500}
    if (!upmaze$alive){myreward = -500}
    qvisits = upcont$wq[upcont$lp[1],upcont$lp[2],upcont$lp[3],upcont$lp[4],upmaze$lastAction,'visits']
    upcont$wq[upcont$lp[1],upcont$lp[2],upcont$lp[3],upcont$lp[4],upmaze$lastAction,'visits'] = qvisits + 1
    mooves = names(which(upcont$vm[upmaze$wobbie[1],upmaze$wobbie[2],]))
    newPosQs = upcont$wq[upmaze$wobbie[1],upmaze$wobbie[2],upmaze$monster1[1],upmaze$monster1[2],mooves,'q']
    penalty = if (upmaze$lastAction == '5') 1 else 0
    qPrime = myreward - penalty + max(newPosQs)
    oldQ = upcont$wq[upcont$lp[1],upcont$lp[2],upcont$lp[3],upcont$lp[4],upmaze$lastAction, 'q']
    upcont$wq[upcont$lp[1],upcont$lp[2],upcont$lp[3],upcont$lp[4],upmaze$lastAction,'q'] = oldQ - learnr * (oldQ - qPrime)
    return(upcont)
  }
  list(decideAction = decideAction, update = update, doRand = T, wq = wobQ, lp= lastpos, vm = valmove, gc = gamecount)
}